{"version":3,"file":"static/js/826.6e005678.chunk.js","mappings":"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","sources":["components/charInfo/CharInfo.js","components/charList/CharList.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/randomChar/RandomChar.js","components/pages/MainPage.js"],"sourcesContent":["import \"./charInfo.scss\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport useMarvelService from \"../../services/marvelService\";\r\nimport { Link } from \"react-router-dom\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nconst CharInfo = ({ charId }) => {\r\n  const [char, setChar] = useState(null);\r\n  const { process, getCharacterById,  setProcess } =\r\n    useMarvelService();\r\n  useEffect(() => {\r\n    updateChar();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [charId]);\r\n\r\n  const onCharLoaded = (char) => setChar(char);\r\n  const updateChar = () => {\r\n    if (!charId) return;\r\n    getCharacterById(charId)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\r\n};\r\n\r\nconst View = ({ data }) => {\r\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\r\n  const comicsList = comics.length ? (\r\n    <Comics comics={comics} />\r\n  ) : (\r\n    <p>Comics not found :(</p>\r\n  );\r\n  const imgStyle =\r\n    thumbnail.indexOf(\"image_not_available.jpg\") !== -1\r\n      ? { objectFit: \"unset\" }\r\n      : { objectFit: \"cover\" };\r\n  return (\r\n    <>\r\n      <div className=\"char__basics\">\r\n        <img src={thumbnail} alt={name} style={imgStyle} />\r\n        <div>\r\n          <div className=\"char__info-name\">{name}</div>\r\n          <div className=\"char__btns\">\r\n            <a href={homepage} className=\"button button__main\">\r\n              <div className=\"inner\">homepage</div>\r\n            </a>\r\n            <a href={wiki} className=\"button button__secondary\">\r\n              <div className=\"inner\">Wiki</div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"char__descr\">{description}</div>\r\n      <div className=\"char__comics\">Comics:</div>\r\n      <ul className=\"char__comics-list\">{comicsList}</ul>\r\n    </>\r\n  );\r\n};\r\nconst Comics = ({ comics }) => {\r\n  return comics.map((item, i) => {\r\n    // eslint-disable-next-line\r\n    if (i > 9) return;\r\n    const comicId = item.resourceURI.replace(\r\n      \"http://gateway.marvel.com/v1/public/comics/\",\r\n      \"\"\r\n    );\r\n    return (\r\n      <li key={i} className=\"char__comics-item\">\r\n        <Link to={`/comics/${comicId}`}>{item.name}</Link>\r\n      </li>\r\n    );\r\n  });\r\n};\r\n\r\nexport default CharInfo;\r\n","import \"./charList.scss\";\r\nimport { useMemo, useRef, useState } from \"react\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport { useEffect } from \"react/cjs/react.development\";\r\nimport useMarvelService from \"../../services/marvelService\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Spinner />;\r\n    case \"loading\":\r\n      return newItemLoading ? <Component /> : <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\nconst CharList = (props) => {\r\n  const [charList, setCharList] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [charListOffset, setCharListOffset] = useState(210);\r\n  const [charListEnded, setCharListEnded] = useState(false);\r\n\r\n  const { getAllCharacters, process, setProcess } = useMarvelService();\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => onRequest(charListOffset, false), []);\r\n\r\n  const onRequest = (offset = charListOffset, initial = true) => {\r\n    setNewItemLoading(initial);\r\n    getAllCharacters(9, offset)\r\n      .then(onCharListLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n  const onCharListLoaded = (newCharList) => {\r\n    let ended = false;\r\n    if (newCharList.length < 9) ended = true;\r\n    setCharList((charList) => [...charList, ...newCharList]);\r\n    setNewItemLoading(false);\r\n    setCharListOffset((charListOffset) => charListOffset + 9);\r\n    setCharListEnded(ended);\r\n  };\r\n  const itemRefs = useRef([]);\r\n\r\n  const focusOnItem = (id) => {\r\n    itemRefs.current.forEach((item) =>\r\n      item.classList.remove(\"char__item_selected\")\r\n    );\r\n    itemRefs.current[id].classList.add(\"char__item_selected\");\r\n    itemRefs.current[id].focus();\r\n  };\r\n  const renderItems = (arr) => {\r\n    const items = (\r\n      <TransitionGroup component={null} timeout={500}>\r\n        {arr.map((char, i) => {\r\n          const { name, thumbnail, id } = char;\r\n          const imgStyle =\r\n            thumbnail.indexOf(\"image_not_available.jpg\") !== -1\r\n              ? { objectFit: \"unset\" }\r\n              : { objectFit: \"cover\" };\r\n\r\n          return (\r\n            <CSSTransition key={id} timeout={500} classNames=\"item\">\r\n              <li\r\n                className=\"char__item\"\r\n                key={id}\r\n                tabIndex={0}\r\n                onClick={() => {\r\n                  props.onUpdateChar(id);\r\n                  focusOnItem(i);\r\n                }}\r\n                ref={(el) => (itemRefs.current[i] = el)}\r\n                onKeyPress={(e) => {\r\n                  if (e.key === \" \" || e.key === \"Enter\") {\r\n                    props.onUpdateChar(id);\r\n                    focusOnItem(i);\r\n                  }\r\n                }}\r\n              >\r\n                <img src={thumbnail} alt=\"thumbnail\" style={imgStyle} />\r\n                <div className=\"char__name\">{name}</div>\r\n              </li>\r\n            </CSSTransition>\r\n          );\r\n        })}\r\n      </TransitionGroup>\r\n    );\r\n    return <ul className=\"char__grid\">{items}</ul>;\r\n  };\r\n  const elements = useMemo(() => {\r\n    return setContent(process, () => renderItems(charList), newItemLoading);\r\n    // eslint-disable-next-line\r\n  }, [process]);\r\n  return (\r\n    <div className=\"char__list\">\r\n      {elements}\r\n      <button\r\n        className=\"button button__main button__long\"\r\n        style={{ display: charListEnded ? \"none\" : \"block\" }}\r\n        disabled={newItemLoading}\r\n        onClick={() => onRequest(charListOffset)}\r\n      >\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharList;\r\n","import * as Yup from \"yup\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport useMarvelService from \"../../services/marvelService\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./charSearchForm.scss\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      break;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component data={data} />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { getCharacterByName, setProcess, process } = useMarvelService();\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n  const updateChar = (charName) => {\r\n    getCharacterByName(charName)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n  const results = ({ data }) => {\r\n    console.log(data);\r\n    if (!data ? null : data.length > 0) {\r\n      return (\r\n        <div className=\"char__search-wrapper\">\r\n          <div className=\"char__search-success\">\r\n            There is! Visit {data[0].name} page?\r\n          </div>\r\n          <Link\r\n            to={`/characters/${data[0].id}`}\r\n            className=\"button button__secondary\"\r\n          >\r\n            <div className=\"inner\">To page</div>\r\n          </Link>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"char__search-error\">\r\n        The character was not found. Check the name and try again\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"char__search-form\">\r\n        <Formik\r\n          initialValues={{ charName: \"\" }}\r\n          validationSchema={Yup.object({\r\n            charName: Yup.string().required(\"This field is required\"),\r\n          })}\r\n          onSubmit={({ charName }) => {\r\n            updateChar(charName);\r\n          }}\r\n        >\r\n          <Form>\r\n            <label className=\"char__search-label\" htmlFor=\"charName\">\r\n              Or find a character by name:\r\n            </label>\r\n            <div className=\"char__search-wrapper\">\r\n              <Field\r\n                id=\"charName\"\r\n                name=\"charName\"\r\n                type=\"text\"\r\n                placeholder=\"Enter name\"\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                className=\"button button__main\"\r\n                disabled={process === \"loading\"}\r\n              >\r\n                <div className=\"inner\">find</div>\r\n              </button>\r\n            </div>\r\n            <FormikErrorMessage\r\n              component=\"div\"\r\n              className=\"char__search-error\"\r\n              name=\"charName\"\r\n            />\r\n          </Form>\r\n        </Formik>\r\n        {setContent(process, results, char)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nexport default class ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error) {\r\n    console.log(error);\r\n    this.setState({ error: true });\r\n  }\r\n  render() {\r\n    if (this.state.error) return <ErrorMessage />;\r\n    return this.props.children;\r\n  }\r\n}\r\n","import \"./randomChar.scss\";\r\nimport mjolnir from \"../../resources/img/mjolnir.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport useMarvelService from \"../../services/marvelService\";\r\n\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nconst RandomChar = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { process, getCharacterById,  setProcess } =\r\n    useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n    const timerId = setInterval(updateChar, 60000);\r\n\r\n    return () => {\r\n      clearInterval(timerId);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = () => {\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    getCharacterById(id)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n  const onRandomChar = (e) => {\r\n    updateChar();\r\n  };\r\n  return (\r\n    <div className=\"randomchar\">\r\n      {setContent(process, View, char)}\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n          Random character for today!\r\n          <br />\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">Or choose another one</p>\r\n        <button className=\"button button__main\">\r\n          <div className=\"inner\" onClick={onRandomChar}>\r\n            try it\r\n          </div>\r\n        </button>\r\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst View = ({ data }) => {\r\n  const { name, description, thumbnail, homepage, wiki } = data;\r\n  const imgStyle =\r\n    thumbnail.indexOf(\"image_not_available.jpg\") !== -1\r\n      ? { objectFit: \"unset\" }\r\n      : { objectFit: \"cover\" };\r\n\r\n  return (\r\n    <div className=\"randomchar__block\">\r\n      <img\r\n        src={thumbnail}\r\n        alt=\"Random character\"\r\n        className=\"randomchar__img\"\r\n        style={imgStyle}\r\n      />\r\n      <div className=\"randomchar__info\">\r\n        <p className=\"randomchar__name\">{name}</p>\r\n        <p className=\"randomchar__descr\">{description}</p>\r\n        <div className=\"randomchar__btns\">\r\n          <a href={homepage} className=\"button button__main\">\r\n            <div className=\"inner\">homepage</div>\r\n          </a>\r\n          <a href={wiki} className=\"button button__secondary\">\r\n            <div className=\"inner\">Wiki</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomChar;\r\n","import { useState } from \"react/cjs/react.development\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\n\r\nconst MainPage = () => {\r\n  const [charId, setCharId] = useState(null);\r\n  const onUpdateChar = (id) => setCharId(id);\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onUpdateChar={onUpdateChar} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={charId} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default MainPage;\r\n"],"names":["View","_ref2","data","name","description","thumbnail","homepage","wiki","comics","comicsList","length","_jsx","Comics","children","imgStyle","indexOf","objectFit","_jsxs","_Fragment","className","src","alt","style","href","_ref3","map","item","i","comicId","resourceURI","replace","Link","to","concat","_ref","charId","char","setChar","useState","process","getCharacterById","setProcess","useMarvelService","useEffect","updateChar","onCharLoaded","then","setContent","props","charList","setCharList","newItemLoading","setNewItemLoading","charListOffset","setCharListOffset","charListEnded","setCharListEnded","getAllCharacters","onRequest","offset","arguments","undefined","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","id","current","forEach","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","TransitionGroup","component","timeout","CSSTransition","classNames","tabIndex","onClick","onUpdateChar","ref","el","onKeyPress","e","key","renderItems","display","disabled","CharSearchForm","getCharacterByName","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","console","log","ErrorBoundary","constructor","state","error","componentDidCatch","this","setState","render","RandomChar","timerId","setInterval","clearInterval","Math","floor","random","mjolnir","MainPage","setCharId","CharList","CharInfo"],"sourceRoot":""}